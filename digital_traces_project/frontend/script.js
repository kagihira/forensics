const API_BASE = window.location.origin.replace("5500", "8001");

// üîπ –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ E01 —Ñ–∞–π–ª–∞
document.getElementById("uploadForm").addEventListener("submit", async function(event) {
    event.preventDefault();

    let fileInput = document.getElementById("e01File");
    let deviceId = document.getElementById("deviceId").value;
    let resultContainer = document.getElementById("uploadResult");
    
    if (!fileInput.files.length) {
        resultContainer.innerText = "‚ö†Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π.";
        return;
    }

    let formData = new FormData();
    formData.append("file", fileInput.files[0]);
    formData.append("device_id", deviceId);

    resultContainer.innerText = "‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞...";

    try {
        let response = await fetch(`${API_BASE}/upload_e01/`, {
            method: "POST",
            body: formData
        });

        let result = await response.json();
        console.log("–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:", result);

        if (!response.ok) throw new Error(result.error || "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞");

        resultContainer.innerText = `‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω: ${result.message || "–£—Å–ø–µ—Ö"}`;
    } catch (error) {
        resultContainer.innerText = `‚ùå –û—à–∏–±–∫–∞: ${error.message}`;
        console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞:", error);
    }
});

// üîπ –§—É–Ω–∫—Ü–∏—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
async function extractText() {
    let deviceId = document.getElementById("extractDeviceId").value;
    let resultContainer = document.getElementById("extractResult");
    resultContainer.innerText = "‚è≥ –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç...";

    try {
        let response = await fetch(`${API_BASE}/extract_text/${deviceId}/`);
        let result = await response.json();
        console.log("–ò–∑–≤–ª–µ—á—ë–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:", result);

        if (!response.ok) throw new Error(result.error || "–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞");

        resultContainer.innerText = `üìÑ –ò–∑–≤–ª–µ—á—ë–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: ${result.message || "–£—Å–ø–µ—Ö"}`;
    } catch (error) {
        resultContainer.innerText = `‚ùå –û—à–∏–±–∫–∞: ${error.message}`;
        console.error("–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞:", error);
    }
}

// üîπ –§—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–∫—Å—Ç–∞
async function analyzeText() {
    let deviceId = document.getElementById("analyzeDeviceId").value;
    let resultContainer = document.getElementById("analyzeResult");
    resultContainer.innerText = "‚è≥ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç...";

    try {
        let response = await fetch(`${API_BASE}/analyze_text/${deviceId}/`);
        let result = await response.json();
        console.log("–ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞:", result);

        if (!response.ok) throw new Error(result.error || "–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–∫—Å—Ç–∞");

        resultContainer.innerText = `üîç –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞: ${result.message || "–ì–æ—Ç–æ–≤–æ"}`;
    } catch (error) {
        resultContainer.innerText = `‚ùå –û—à–∏–±–∫–∞: ${error.message}`;
        console.error("–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–∫—Å—Ç–∞:", error);
    }
}

// üîπ –§—É–Ω–∫—Ü–∏—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤
async function compareDevices() {
    let device1 = document.getElementById("compareDevice1").value;
    let device2 = document.getElementById("compareDevice2").value;
    let resultContainer = document.getElementById("compareResult");

    resultContainer.innerText = "‚è≥ –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Ñ–∞–π–ª—ã...";

    try {
        let response = await fetch(`${API_BASE}/compare/?device1=${device1}&device2=${device2}`);
        let result = await response.json();
        console.log("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å—Ä–∞–≤–Ω–µ–Ω–∏—è:", result);

        if (!response.ok) throw new Error(result.error || "–û—à–∏–±–∫–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤");

        if (result.matches.length > 0) {
            let output = "<h3>üîç –ù–∞–π–¥–µ–Ω—ã —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è:</h3><ul>";
            result.matches.forEach(match => {
                output += `<li>üìÑ ${match[0]} ‚ü∑ üìÑ ${match[1]} (–°–æ–≤–ø–∞–¥–µ–Ω–∏–µ: ${(match[2] * 100).toFixed(2)}%)</li>`;
            });
            output += "</ul>";
            resultContainer.innerHTML = output;
        } else {
            resultContainer.innerText = "‚ùå –°–æ–≤–ø–∞–¥–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.";
        }
    } catch (error) {
        resultContainer.innerText = `‚ùå –û—à–∏–±–∫–∞: ${error.message}`;
        console.error("–û—à–∏–±–∫–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è:", error);
    }
}

// üîπ –§—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ –ø–µ—Ä–µ–ø–∏—Å–æ–∫
async function analyzeMessages() {
    let deviceId = document.getElementById("messagesDeviceId").value;
    let resultContainer = document.getElementById("messagesResult");

    resultContainer.innerText = "‚è≥ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–µ–ø–∏—Å–∫—É...";

    try {
        let response = await fetch(`${API_BASE}/analyze_messages/${deviceId}/`);
        let result = await response.json();
        console.log("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ —Å–æ–æ–±—â–µ–Ω–∏–π:", result);

        if (!response.ok) throw new Error(result.error || "–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø–µ—Ä–µ–ø–∏—Å–æ–∫");

        let output = "<h3>üì© –ü–µ—Ä–µ–ø–∏—Å–∫–∞:</h3><ul>";
        Object.keys(result.conversations).forEach(key => {
            output += `<li><strong>${key}</strong>:<br>${result.conversations[key].join("<br>")}</li>`;
        });
        output += "</ul>";
        resultContainer.innerHTML = output;
    } catch (error) {
        resultContainer.innerText = `‚ùå –û—à–∏–±–∫–∞: ${error.message}`;
        console.error("–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å–æ–æ–±—â–µ–Ω–∏–π:", error);
    }
}

// üîπ –§—É–Ω–∫—Ü–∏—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
async function sortDocuments() {
    let deviceId = document.getElementById("sortDeviceId").value;
    let resultContainer = document.getElementById("sortResult");

    resultContainer.innerText = "‚è≥ –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã...";

    try {
        let response = await fetch(`${API_BASE}/sort_documents/${deviceId}/`);
        let result = await response.json();
        console.log("–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:", result);

        if (!response.ok) throw new Error(result.error || "–û—à–∏–±–∫–∞ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤");

        let output = "<h3>üìÇ –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞:</h3>";
        output += "<h4 style='color: red;'>‚ö†Ô∏è –û–ø–∞—Å–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã:</h4><ul>";
        result.sorted_documents.dangerous.forEach(file => {
            output += `<li>${file}</li>`;
        });
        output += "</ul>";

        output += "<h4 style='color: green;'>‚úÖ –ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã:</h4><ul>";
        result.sorted_documents.safe.forEach(file => {
            output += `<li>${file}</li>`;
        });
        output += "</ul>";

        resultContainer.innerHTML = output;
    } catch (error) {
        resultContainer.innerText = `‚ùå –û—à–∏–±–∫–∞: ${error.message}`;
        console.error("–û—à–∏–±–∫–∞ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏:", error);
    }
}

// üîπ –§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ —Å–≤—è–∑–µ–π –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
async function findConnections() {
    let deviceId = document.getElementById("connectionsDeviceId").value;
    let resultContainer = document.getElementById("connectionsResult");

    resultContainer.innerText = "‚è≥ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–≤—è–∑–∏...";

    try {
        let response = await fetch(`${API_BASE}/find_connections/${deviceId}/`);
        let result = await response.json();
        console.log("–°–≤—è–∑–∏ –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏:", result);

        if (!response.ok) throw new Error(result.error || "–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å–≤—è–∑–µ–π");

        let output = "<h3>üîó –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Å–≤—è–∑–∏:</h3><ul>";
        Object.keys(result.connections).forEach(user => {
            output += `<li><strong>${user}</strong> —Å–≤—è–∑–∞–Ω —Å: ${result.connections[user].join(", ")}</li>`;
        });
        output += "</ul>";
        resultContainer.innerHTML = output;
    } catch (error) {
        resultContainer.innerText = `‚ùå –û—à–∏–±–∫–∞: ${error.message}`;
        console.error("–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å–≤—è–∑–µ–π:", error);
    }
}
