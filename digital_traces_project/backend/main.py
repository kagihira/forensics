from fastapi import FastAPI, UploadFile, File, Form
import shutil
import os
import uuid
import json
from backend.extract_from_e01 import extract_files_from_e01
from backend.extract_text import extract_text_from_file
from backend.analyze_text import classify_text
from backend.compare_devices import compare_texts, compare_images, get_all_files

app = FastAPI()

UPLOAD_DIR = "uploads"
EXTRACTED_DIR = "data"

# üìÇ –°–æ–∑–¥–∞—ë–º –ø–∞–ø–∫–∏, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
os.makedirs(UPLOAD_DIR, exist_ok=True)
os.makedirs(EXTRACTED_DIR, exist_ok=True)

@app.post("/upload_e01/")
async def upload_e01(file: UploadFile = File(...), device_id: str = Form(...)):
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç `.E01`-—Ñ–∞–π–ª –∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç –µ–≥–æ —Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫—É —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞.
    """
    device_folder = os.path.join(EXTRACTED_DIR, device_id)
    os.makedirs(device_folder, exist_ok=True)

    unique_filename = f"{uuid.uuid4()}_{file.filename}"
    file_path = os.path.join(UPLOAD_DIR, unique_filename)

    with open(file_path, "wb") as buffer:
        shutil.copyfileobj(file.file, buffer)

    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫—É —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    extraction_success = extract_files_from_e01(file_path, device_folder)

    if not extraction_success:
        return {"error": "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ —Ñ–∞–π–ª–æ–≤"}

    return {"message": f"‚úÖ –§–∞–π–ª—ã –∏–∑–≤–ª–µ—á–µ–Ω—ã –¥–ª—è {device_id} –≤ {device_folder}"}

@app.get("/extract_text/{device_id}/")
async def extract_text_from_device(device_id: str):
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏ —Ö—ç—à–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–∑ —Ñ–∞–π–ª–æ–≤ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞, –≤–∫–ª—é—á–∞—è –≤–ª–æ–∂–µ–Ω–Ω—ã–µ –ø–∞–ø–∫–∏.
    """
    device_folder = os.path.join(EXTRACTED_DIR, device_id)
    if not os.path.exists(device_folder):
        return {"error": f"‚ùå –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ {device_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"}

    extracted_data = {}

    for file_path in get_all_files(device_id):  # –¢–µ–ø–µ—Ä—å –∏—â–µ–º –≤–æ –≤—Å–µ—Ö –ø–∞–ø–∫–∞—Ö
        extracted_text = extract_text_from_file(file_path)
        extracted_data[file_path] = extracted_text

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ JSON
    extracted_text_file = os.path.join(device_folder, "extracted_text.json")
    with open(extracted_text_file, "w", encoding="utf-8") as f:
        json.dump(extracted_data, f, indent=4)

    return {"message": f"‚úÖ –¢–µ–∫—Å—Ç –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑–≤–ª–µ—á–µ–Ω—ã –¥–ª—è {device_id}", "data": extracted_data}

@app.get("/analyze_text/{device_id}/")
async def analyze_text_for_device(device_id: str):
    """
    –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —É–∂–µ –∏–∑–≤–ª–µ—á—ë–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∏–∑ —Ñ–∞–π–ª–æ–≤ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞.
    """
    device_folder = os.path.join(EXTRACTED_DIR, device_id)
    extracted_text_file = os.path.join(device_folder, "extracted_text.json")

    if not os.path.exists(extracted_text_file):
        return {"error": f"‚ùå –ù–µ—Ç –∏–∑–≤–ª–µ—á—ë–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è {device_id}, —Å–Ω–∞—á–∞–ª–∞ –≤—ã–∑–æ–≤–∏—Ç–µ /extract_text/{device_id}/"}

    with open(extracted_text_file, "r", encoding="utf-8") as f:
        extracted_data = json.load(f)

    analyzed_results = {}
    for filename, text in extracted_data.items():
        classification = classify_text(text)
        analyzed_results[filename] = classification

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑
    with open(f"{device_folder}/analysis_results.json", "w", encoding="utf-8") as f:
        json.dump(analyzed_results, f, indent=4)

    return {"message": f"‚úÖ –¢–µ–∫—Å—Ç –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è {device_id}", "data": analyzed_results}

@app.get("/compare/")
async def compare_devices(device1: str, device2: str):
    """
    –°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç —Ñ–∞–π–ª—ã –º–µ–∂–¥—É –¥–≤—É–º—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º–∏.
    """
    matches = compare_texts(device1, device2)
    return {"matches": matches}

@app.get("/compare_images/")
async def compare_device_images(device1: str, device2: str):
    """
    –°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–µ–∂–¥—É –¥–≤—É–º—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º–∏.
    """
    matches = compare_images(device1, device2)
    return {"image_matches": matches}
