from fastapi import FastAPI, UploadFile, File
import shutil
import os
from backend.extract_from_e01 import extract_files_from_e01
from backend.extract_text import extract_text_from_file
from backend.analyze_text import classify_text

app = FastAPI()

UPLOAD_DIR = "uploads"
EXTRACTED_DIR = "data"

# üìÇ –°–æ–∑–¥–∞—ë–º –ø–∞–ø–∫–∏, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
os.makedirs(UPLOAD_DIR, exist_ok=True)
os.makedirs(EXTRACTED_DIR, exist_ok=True)

@app.post("/upload_e01/")
async def upload_e01(file: UploadFile = File(...)):
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç `E01`-—Ñ–∞–π–ª –∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç –∏–∑ –Ω–µ–≥–æ —Ñ–∞–π–ª—ã.
    """
    file_path = os.path.join(UPLOAD_DIR, file.filename)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    with open(file_path, "wb") as buffer:
        shutil.copyfileobj(file.file, buffer)

    if not os.path.exists(file_path):
        return {"error": "‚ùå –§–∞–π–ª –Ω–µ –±—ã–ª –∑–∞–≥—Ä—É–∂–µ–Ω"}

    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ñ–∞–π–ª—ã –∏–∑ E01
    extraction_success = extract_files_from_e01(file_path, EXTRACTED_DIR)

    if not extraction_success:
        return {"error": "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ —Ñ–∞–π–ª–æ–≤ –∏–∑ E01"}

    return {"message": f"‚úÖ –§–∞–π–ª—ã –∏–∑–≤–ª–µ—á–µ–Ω—ã –∏–∑ {file.filename} –≤ {EXTRACTED_DIR}"}

@app.get("/analyze_all/")
async def analyze_all():
    """
    –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤—Å–µ —Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫–µ /data
    """
    results = {}
    for filename in os.listdir(EXTRACTED_DIR):
        file_path = os.path.join(EXTRACTED_DIR, filename)
        text = extract_text_from_file(file_path)
        classification = classify_text(text)
        results[filename] = classification
    return results
